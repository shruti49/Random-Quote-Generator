{"version":3,"sources":["components/Header/Header.component.jsx","components/QuoteBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","QuoteBox","quotes","this","props","id","onClick","fetchData","index_es","icon","faSyncAlt","href","quote","faTwitter","faQuoteLeft","faQuoteRight","character","faHeart","Component","App","state","fetch","then","response","json","_this","setState","Header_component","QuoteBox_component_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAYeA,eARA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,oECIeC,mLACV,IACCC,EAAWC,KAAKC,MAAhBF,OACR,OACEL,EAAAC,EAAAC,cAAA,OAAKM,GAAG,YAAYL,UAAU,mBAC5BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UACEM,GAAG,YACHL,UAAU,2CACVM,QAASH,KAAKC,MAAMG,WAEpBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMC,MALzB,cAOAb,EAAAC,EAAAC,cAAA,KACEM,GAAG,cACHL,UAAU,2CACVW,KACE,yDACAT,EAAOU,OAGTf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMI,MARzB,WAWFhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGM,GAAG,OAAOL,UAAU,eACrBH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMK,MACvBjB,EAAAC,EAAAC,cAAA,WAFF,IAEUG,EAAOU,MAFjB,IAEwBf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMM,OAE/ClB,EAAAC,EAAAC,cAAA,MAAIM,GAAG,SAASL,UAAU,iBAA1B,KAEGE,EAAOc,WAEVnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,iBAEEH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMQ,gBAnCGC,aCJjBC,6MACnBC,MAAQ,CACNlB,OAAQ,MAOVK,UAAY,WACVc,MAAM,2CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAV,GAAK,OAAIa,EAAKC,SAAS,CAAExB,OAAQU,0FANzCT,KAAKI,6CASE,IACCL,EAAWC,KAAKiB,MAAhBlB,OACR,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAU1B,OAAQA,EAAQK,UAAWJ,KAAKI,oBApBjBW,aCKbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.ab866fa8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.styles.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className='header'>\r\n      <h1 className='header__text'>Random Quotes Generator</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nimport './QuoteBox.styles.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faHeart } from '@fortawesome/free-regular-svg-icons';\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faQuoteRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class QuoteBox extends Component {\r\n  render() {\r\n    const { quotes } = this.props;\r\n    return (\r\n      <div id='quote-box' className='quote-container'>\r\n        <div className='quote-button'>\r\n          <button\r\n            id='new-quote'\r\n            className='quote-button__link quote-button__link--1'\r\n            onClick={this.props.fetchData}\r\n          >\r\n            <FontAwesomeIcon icon={faSyncAlt} /> New Quote\r\n          </button>\r\n          <a\r\n            id='tweet-quote'\r\n            className='quote-button__link quote-button__link--2'\r\n            href={\r\n              'https://twitter.com/intent/tweet?hashtags=quotes&text=' +\r\n              quotes.quote\r\n            }\r\n          >\r\n            <FontAwesomeIcon icon={faTwitter} /> Share\r\n          </a>\r\n        </div>\r\n        <div className='quote'>\r\n          <p id='text' className='quote__text'>\r\n            <FontAwesomeIcon icon={faQuoteLeft} />\r\n            <br /> {quotes.quote} <FontAwesomeIcon icon={faQuoteRight} />\r\n          </p>\r\n          <h2 id='author' className='quote__author'>\r\n            --\r\n            {quotes.character}\r\n          </h2>\r\n          <p className='quote__footer-text'>\r\n            Made By Shruti\r\n            <FontAwesomeIcon icon={faHeart} />\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport Header from './components/Header/Header.component';\r\nimport QuoteBox from './components/QuoteBox.component';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    quotes: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = () => {\r\n    fetch('https://got-quotes.herokuapp.com/quotes')\r\n      .then(response => response.json())\r\n      .then(quote => this.setState({ quotes: quote }));\r\n  };\r\n\r\n  render() {\r\n    const { quotes } = this.state;\r\n    return (\r\n      <div className='app'>\r\n        <Header />\r\n        <QuoteBox quotes={quotes} fetchData={this.fetchData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}