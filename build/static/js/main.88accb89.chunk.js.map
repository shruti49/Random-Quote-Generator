{"version":3,"sources":["components/Header.js","components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","QuoteBox","quotes","this","props","id","onClick","fetchData","index_es","icon","faSyncAlt","href","quote","faTwitter","lib","animationIn","isVisible","faQuoteLeft","faQuoteRight","character","faHeart","Component","App","state","fetch","then","response","json","_this","setState","components_Header","QuoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAUeA,EARA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mECIeC,mLACV,IACCC,EAAWC,KAAKC,MAAhBF,OACR,OACEL,EAAAC,EAAAC,cAAA,OAAKM,GAAG,YAAYL,UAAU,mBAC5BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UACEM,GAAG,YACHL,UAAU,YACVM,QAASH,KAAKC,MAAMG,WAEpBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMC,MAAc,IALvC,aAQAb,EAAAC,EAAAC,cAAA,KACEY,KACE,yDACAT,EAAOU,MAETP,GAAG,eAEHR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAChBH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMI,MAAc,IADvC,WAMJhB,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,YAAY,OAAOC,WAAW,GACtCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGM,GAAG,OAAOL,UAAU,cACrBH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMQ,MACvBpB,EAAAC,EAAAC,cAAA,WAFF,IAEUG,EAAOU,MAFjB,IAEwBf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMS,OAE/CrB,EAAAC,EAAAC,cAAA,MAAIM,GAAG,SAASL,UAAU,gBAA1B,KACGE,EAAOiB,WAEVtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,iBACgBH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAiBC,KAAMW,iBArCbC,aCLjBC,6MACnBC,MAAQ,CACNrB,OAAQ,MAOVK,UAAY,WACViB,MAAM,2CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAb,GAAK,OAAIgB,EAAKC,SAAS,CAAE3B,OAAQU,0FANzCT,KAAKI,6CAUL,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,CAAU7B,OAAQC,KAAKoB,MAAMrB,OAAQK,UAAWJ,KAAKI,oBAnB5Bc,aCQbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.88accb89.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"heading\">\r\n      <h1 className=\"header-text\">Random Quotes Generator</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faQuoteRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSyncAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class QuoteBox extends Component {\r\n  render() {\r\n    const { quotes } = this.props;\r\n    return (\r\n      <div id=\"quote-box\" className=\"quote-container\">\r\n        <div className=\"quote-buttons\">\r\n          <button\r\n            id=\"new-quote\"\r\n            className=\"quote-btn\"\r\n            onClick={this.props.fetchData}\r\n          >\r\n            <FontAwesomeIcon icon={faSyncAlt} />{\" \"}\r\n            New Quote \r\n          </button>\r\n          <a\r\n            href={\r\n              \"https://twitter.com/intent/tweet?hashtags=quotes&text=\" +\r\n              quotes.quote\r\n            }\r\n            id=\"tweet-quote\"\r\n          >\r\n            <button className=\"tweet-btn\">\r\n              <FontAwesomeIcon icon={faTwitter} />{\" \"}\r\n              Share\r\n            </button>\r\n          </a>\r\n        </div>\r\n        <Animated animationIn=\"tada\" isVisible={true}>\r\n          <div className=\"quotation\">\r\n            <p id=\"text\" className=\"quote-text\">\r\n              <FontAwesomeIcon icon={faQuoteLeft} />\r\n              <br /> {quotes.quote} <FontAwesomeIcon icon={faQuoteRight} />\r\n            </p>\r\n            <h2 id=\"author\" className=\"quote-author\">--\r\n              {quotes.character}\r\n            </h2>\r\n            <p className=\"footer-text\">\r\n              Made By Shruti<FontAwesomeIcon icon={faHeart} /> \r\n            </p>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport QuoteBox from \"./components/QuoteBox\";\n\nexport default class App extends Component {\n  state = {\n    quotes: []\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    fetch(\"https://got-quotes.herokuapp.com/quotes\")\n      .then(response => response.json())\n      .then(quote => this.setState({ quotes: quote }));\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <QuoteBox quotes={this.state.quotes} fetchData={this.fetchData} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}